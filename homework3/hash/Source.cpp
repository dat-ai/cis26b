/*
/*
CIS 22C - Winter 2016
------------------------------------------------------------------
HOMEWORK 5 - Huffman Tree - Heap, HashedTable
------------------------------------------------------------------
Author:			 Dat Thanh Nguyen
IDE:			 Microsoft Visual Studio 2015
Debugging Tools: Native Memory Diagnostic Tools + Visual Leak Detector

Last Update: 8:35 PM 2/21/2016
------------------------------------------------------------------

9:30 PM 3/9/2016
*/

#include<iostream>
#include <iomanip>
#include <fstream>
#include "HuffmanTree.h"
#include "HashTable.h"
#include "MinHeap.h"
#include <bitset>
#include <algorithm>
#define filename ""
#define ANSCII_SIZE 200 // This is the maxinum possibility for ANSCII Table. Not sure how the ANSCII in different language would be, though!
using namespace std;
int readFile(HashTable&, vector<HuffmanNode*>&, string&);
void printEncodedText(HashTable&,string,string&);
int main() {

	//This hashtable would allow insert and search in O(1) instead of O(n)
	//ANSCII hashtable
	HashTable ht(ANSCII_SIZE); 
	//Instead of an array, I decided to use vector.
	vector<HuffmanNode*> t;
	string uncompressedbits, compressedbits, decodedtext;
	int size = readFile(ht,t,uncompressedbits);
	//Build a min_heap
	MinHeap heap(t);
	//Build the Huffman Tree from previous heap
	HuffmanTree huffmanTree(heap);
	huffmanTree.encode(); 
	ht.displayTable();
	printEncodedText(ht,uncompressedbits,compressedbits);
	//Decode binary into text
	huffmanTree.decode(compressedbits, decodedtext);
	//Print out decoded text
	cout << "\n********************************Decoded Text using HuffmanTree & Encoded Text*****************************\n";
	cout << decodedtext << endl;	
//Release memory
	huffmanTree.destroyTree();

	cout << "\nPlease press enter to quit...";
	cin.get();
	return 0; 
}
int readFile(HashTable& ht, vector<HuffmanNode*>&t, string& s) {

	ifstream input;
	input.open("sources.txt");
	int size = 0;
	if (input.is_open()) {
		char c;
		while (input.get(c)) {
		//	cout << c;
			s += bitset<8>(c).to_string();
			HuffmanNode newchar(c);
			ht.insert(&newchar);
		}
		size = ht.getOccupiedSize();
		ht.initialize(t);
		input.close();
	}
	else cout << "Error reading file!" << endl;
	
	return size;
}
void printEncodedText(HashTable& ht, string s, string& compressedbits) {
	ifstream input;
	input.open("sources.txt");
	int size = 0;
	if (input.is_open()) {
		cout << "\n\n ********************************Uncompressed Text Representation in Binary*****************************************\n";
		cout << s << endl;
		cout << "\n\n ********************************Encoded Text using Hash Table & Huffman Tree in Binary***************************** \n";
		char c;
		while (input.get(c)) {
			//	cout << c;
			string bitstring = ht.searchBits(c);
			compressedbits += bitstring;
			cout << bitstring;
		}
		cout << endl;
		input.close();
	}
	else cout << "Error reading file!" << endl;
}

/*
Sample Output:
--------------------------------------------
Char|Frequency | Orginal Bits| Huffman Bits|
--------------------------------------------
   |    155   | 00100000    | 101         |
,  |    11    | 00101100    | 1110011     |
-  |    2     | 00101101    | 1110111101  |
.  |    8     | 00101110    | 0110010     |
B  |    1     | 01000010    | 1110010010  |
D  |    4     | 01000100    | 01100111    |
F  |    1     | 01000110    | 1110010101  |
I  |    2     | 01001001    | 111001000   |
S  |    1     | 01010011    | 1110010011  |
U  |    1     | 01010101    | 1110010100  |
a  |    92    | 01100001    | 1111        |
b  |    5     | 01100010    | 11101100    |
c  |    34    | 01100011    | 10011       |
d  |    30    | 01100100    | 01101       |
e  |    104   | 01100101    | 001         |
f  |    29    | 01100110    | 01010       |
g  |    25    | 01100111    | 01000       |
h  |    20    | 01101000    | 111000      |
i  |    63    | 01101001    | 0111        |
k  |    6     | 01101011    | 11101110    |
l  |    29    | 01101100    | 01011       |
m  |    28    | 01101101    | 01001       |
n  |    52    | 01101110    | 0001        |
o  |    50    | 01101111    | 0000        |
p  |    22    | 01110000    | 111010      |
q  |    1     | 01110001    | 1110111100  |
r  |    66    | 01110010    | 1000        |
s  |    73    | 01110011    | 1100        |
t  |    84    | 01110100    | 1101        |
u  |    34    | 01110101    | 10010       |
v  |    3     | 01110110    | 111011111   |
w  |    6     | 01110111    | 11101101    |
x  |    3     | 01111000    | 111001011   |
y  |    14    | 01111001    | 011000      |
z  |    4     | 01111010    | 01100110    |
--------------------------------------------
Total size:    | 8504 Bits   | 4553 Bits   |
Saved 46.4605% Memory!
--------------------------------------------


********************************Uncompressed Text Representation in Binary*****************************************



********************************Encoded Text using Hash Table & Huffman Tree in Binary*****************************


**************************Decode Text*********************************
In computer science, a data structure is a particular way of storing and organizing data in a computer so that it can be used efficiently. Different kinds of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, B-trees are particularly well-suited for implementation of databases, while compiler implementations usually use hash tables to look up identifiers. Data structures are used in almost every program or software system. Data structures provide a means to manage huge amounts of data efficiently, such as large databases and Internet indexing services. Usually, efficient data structures are a key to designing efficient algorithms. Some formal design methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Data structures are important because the way the programmer chooses to represent data significantly affects the clarity, conciseness, speed of execution, and storage requirements of the program.



*/