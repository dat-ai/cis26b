/*********************************************************************************
 ** CIS 26B                                                            Winter, 2017
 ** Advanced C
 ******************
 **
 ** Homework 5: BINARY SEARCH TREES AND QUEUES
 **
 **********************************************************************************
 
 This program generates a cross- reference listing of the identifiers in an input C program
 
 **********************************************************
 **
 **  Written By: Tram Nguyen
 **  IDE: XCODE
 **  Date: 3/21/2016
 ***************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include "Header.h"

#define SIZECHAR 25 // assume a word has max 25 char
#define LINE 500 // assume a line has max 500 char
#define DEFAULT_INPUT_FILE "e_5_0_text_vs_bin.c"
#define DEFAULT_OUTPUT_FILE "output.txt"

int main(int argc, char *argv[])
{
    FILE *inputFile = openInputFile(argv[1]);
    FILE *outputFile = openOutputFile(argv[2]);
    
    TREENODE *tree = buildBinaryTree(inputFile);
    rewind(inputFile);
    printTime(outputFile);
    printTreeInorder(tree, outputFile);
    printFile(inputFile, outputFile);
    
    deleteTree(tree);
    fclose(inputFile);
    fclose(outputFile);
    return 0;
}

/***************************************************
 Read input C file
    Return file pointer
 */
FILE *openInputFile(char *filename)
{
    FILE *inputFile = fopen(filename, "r");
    if (!inputFile)
    {
        if (!(inputFile = fopen(DEFAULT_INPUT_FILE, "r")))
        {
            printf("File %s not found\n", DEFAULT_INPUT_FILE);
            exit(1);
        }
    }
    
    // check if input file is empty
    fseek (inputFile, 0, SEEK_END);
    if (ftell(inputFile)==0)
    {
        printf("Input file is empty\n");
        exit(2);
    }
    rewind(inputFile);
    
    return inputFile;
}

/***************************************************
 Open output file in write mode
    Return file pointer
 */
FILE *openOutputFile(char *filename)
{
    FILE *outputFile = fopen(filename, "r+w");
    if (!outputFile)
    {
        outputFile = fopen(DEFAULT_OUTPUT_FILE, "r+w"); // overwrite anyway
    }
    return outputFile;
}

/***************************************************
 Queue Insert: insert at the end
 */
void enqueue(LINENUMBER **queue, LINENUMBER **rear, int data)
{
    LINENUMBER *pnew;
    
    pnew = (LINENUMBER *) malloc(sizeof (LINENUMBER));
    if (!pnew)
    {
        printf("... error in enqueue!\n");
        exit(1);
    }
    pnew->number = data;
    pnew->next = NULL;
    if (*queue == NULL) *queue = pnew;
    else (*rear)->next = pnew;
    *rear = pnew;
    
    return;
}

/***************************************************
 Queue Delete: remove the first node
 */
LINENUMBER *dequeue(LINENUMBER **queue, LINENUMBER **rear)
{
    LINENUMBER *first;
    
    if (*queue == NULL) return NULL;
    first = *queue;
    *queue = (*queue)->next;
    if (*queue == NULL) *rear = NULL;
    first->next = NULL;
    
    return first;
}

/***************************************************
 Tree Insert:
    If data not in tree, insert new node
    If data is already there, add line number to existing node
    Return 1 if new node is inserted
    Return 0 if duplicate key
 */
int insert( TREENODE **root, char* data, int lineNumber )
{
    TREENODE **ptr_root = root;
    while(*ptr_root)
    {
        if (strcmp(data,(*ptr_root)->key)>0)
            ptr_root = &(*ptr_root)->right;
        else if (strcmp(data,(*ptr_root)->key)<0)
            ptr_root = &(*ptr_root)->left;
        else // duplicate key
        {
            if (lineNumber != (*ptr_root)->rear->number) // only insert line number if it's not in queue yet
            {
                enqueue(&(*ptr_root)->front, &(*ptr_root)->rear, lineNumber);
                (*ptr_root)->count++;
            }
            return 0;
        }
    }
    if(!(*ptr_root = (TREENODE *) malloc (sizeof(TREENODE))))
        printf( "Fatal malloc error!\n" ), exit(1);
    (*ptr_root)->key = data;
    (*ptr_root)->left  = (*ptr_root)->right = NULL;
    (*ptr_root)->front = NULL;
    (*ptr_root)->rear = NULL;
    enqueue(&(*ptr_root)->front, &(*ptr_root)->rear, lineNumber);
    (*ptr_root)->count = 1;
    return 1; // data inserted
}

/***************************************************
 Read C file and insert identifiers into a tree
    Return an inserted tree
 */
TREENODE *buildBinaryTree(FILE *file)
{
    TREENODE *root = NULL;
    char line[LINE];
    char *ptr;
    int numChars;
    char *identifier;
    int flag; // to determine if a line should be read or not (if comment line then skip)
    char *letter  = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTYUVWXYZ_";
    char *valid = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTYUVWXYZ_1234567890";
    // read file
    int lineNumber = 1;
    while (fgets(line, LINE, file))
    {
        if (strlen(line)!=0)
        {
            // ASSUME THAT START OF COMMENT BLOCK IS AT THE BEGINNING OF LINE
            // AND END OF COMMENT BLOCK IS AT THE END OF LINE
            flag = checkIfStartOfCommentBlock(line);
            if (flag) // if is start of a comment block
            {
                while (fgets(line, LINE, file))
                {
                    lineNumber++;
                    flag = checkIfEndOfCommentBlock(line);
                    if (!flag) continue; // if still inside comment block
                    else // if end of comment block
                    {
                        fgets(line, LINE, file); // read next line
                        lineNumber++;
                        break;
                    }
                }
            }
            flag = checkIfCommentLine(line);
            if (flag) // if line is a comment line
            {
                lineNumber++;
                continue;
            }
            deleteIrrelavantParts(line); // delete <...> and "..."
            ptr = line;
            while (ptr)
            {
                ptr = strpbrk(ptr, letter); // ptr points to first letter char, or _
                if (ptr)
                {
                    identifier = (char*) malloc(sizeof(char)*SIZECHAR);
                    numChars = strspn(ptr, valid); // find out how long is the identifier
                    strncpy(identifier, ptr, numChars); // get identifier
                    insert(&root, identifier, lineNumber); // insert it into the tree
                    ptr = ptr+numChars; // ptr points to next char
                }
            }
        }
        lineNumber++;
    }
    return root;
}


/***************************************************
 Check if a line is start of comment block
 return 1 if it is
 return 0 if not
 */
int checkIfStartOfCommentBlock(char *str)
{
    char *ptr = strstr(str, "/*");
    if (ptr) return 1;
    else return 0;
}

/***************************************************
 Check if a line is end of comment block
 return 1 if it is
 return 0 if not
 */
int checkIfEndOfCommentBlock(char *str)
{
    char *ptr = strstr(str, "*/");
    if (ptr) return 1;
    else return 0;
}

/***************************************************
 Check if a line is a comment line
 return 1 if it is
 return 0 if not
 */
int checkIfCommentLine(char *str)
{
    char *ptr = strstr(str, "//");
    if (ptr) return 1;
    else return 0;
}

/***************************************************
 Delete library name and string
 */
void deleteIrrelavantParts(char *str)
{
    //// Case 1: " .... "
    char *ptr;
    ptr = strchr(str, '"');
    // replace everything in quotes (including the quotes) with ' ' (space)
    // assume that code in C file is correct, so if there's an open quote, there's a closing quote on the same line
    if (ptr)
    {
        *ptr = ' ';
        ptr++;
        while(*ptr != '"')
        {
            *ptr = ' ';
            ptr++;
        }
        *ptr = ' ';
    }
    
    //// Case 2: < .... >
    ptr = strchr(str, '<');
    if (ptr)
    {
        char *ptr2 = strchr(ptr, '>'); // to check if it's a pair of <>
        // replace everything in <> (including the signs) with ' ' (space)
        if (ptr2)
        {
            *ptr = ' ';
            ptr++;
            while(*ptr != '>')
            {
                *ptr = ' ';
                ptr++;
            }
            *ptr = ' ';
        }
    }
    
}

/***************************************************
 Print everything in the file, with line number in front
 */
void printFile(FILE *inputfile, FILE *outputFile)
{
    char line[LINE];
    int lineNumber = 1;
    putc('\n', stdout);
    putc('\n', outputFile);
    while (fgets(line, LINE, inputfile))
    {
        fprintf(stdout, "%d\t: %s",lineNumber, line);
        fprintf(outputFile, "%d\t: %s",lineNumber, line);
        lineNumber++;
    }
}

/***************************************************
 Print an identifier and its line numbers
 */
void printNode(TREENODE *node, FILE *outputFile)
{
    fprintf(stdout, "%-25s", node->key);
    fprintf(outputFile, "%-25s", node->key);
    LINENUMBER *pWalk = node->front;
    putc('\t', stdout);
    putc('\t', outputFile);
    int countNode = node->count;
    // n, count is used to enter new line if queue is too long
    int n = 1;
    int count = 1;
    
    while (count != countNode+1)
    {
        fprintf(stdout, "%5ld\t", pWalk->number);
        fprintf(outputFile, "%5ld\t", pWalk->number);
        pWalk = pWalk->next;
        if (count == 9*n)
        {
            putc('\n', stdout);
            putc('\n', outputFile);
            fprintf(stdout, "%-25s\t", " ");
            fprintf(outputFile, "%-25s\t", " ");
            n++;
        }
        count++;
    }
    putc('\n', stdout);
    putc('\n', outputFile);
}

/***************************************************
 Print sorted list of identifiers
 */
void printTreeInorder(TREENODE *root, FILE *outputFile)
{
    if(root)
    {
        printTreeInorder(root->left, outputFile);
        printNode(root, outputFile);
        printTreeInorder(root->right, outputFile);
    }
    return;
}

/***************************************************
 Print current time
 */
void printTime(FILE *outputFile)
{
    time_t  timeval;  // time
    char   *chtime;   // ctime
    
    time(&timeval);
    chtime  = ctime(&timeval);
    fprintf(stdout, "/************************  Cross Reference Listing  ************************/\n\n");
    fprintf(outputFile, "/************************  Cross Reference Listing  ************************/\n\n");
    fprintf(stdout, "Cross reference listing made at: %s\n", chtime);
    fprintf(outputFile, "Cross reference listing made at: %s\n", chtime);
}

/***************************************************
 Delete the tree
 */
void deleteNode(TREENODE *node)
{
    // delete queue
    LINENUMBER *ptr = node->front;
    LINENUMBER *ptr2 = ptr->next;
    int count = node->count;
    while(count--)
    {
        free(ptr);
        ptr = ptr2;
        if (ptr2 && ptr2->next) ptr2 = ptr2->next;
    }
    // delete key
    free(node->key);
    // delete node
    free(node);
}

/***************************************************
 Delete the tree
 */
void deleteTree(TREENODE *root)
{
    if(root)
    {
        deleteTree(root->left);
        deleteTree(root->right);
        deleteNode(root);
    }
    return;
}

/*  OUTPUT:
 /************************  Cross Reference Listing  ************************/

/*Cross reference listing made at: Tue Mar 21 20:43:05 2017

FILE                     	   11
a                        	   13
double                   	   12	   32	   37
fclose                   	   19	   23	   34	   39
fopen                    	   17	   21
fp                       	   11	   17	   18	   19	   21	   22	   23	   32	   34
                               37	   39
fprintf                  	   18
fread                    	   37
fscanf                   	   22
fwrite                   	   32
if                       	   27	   43
include                  	    5	    6
int                      	    8	   13
long                     	   13
main                     	    8
printf                   	   25	   26	   27	   28	   41	   42	   43	   44
r                        	   21
return                   	   46
sizeof                   	   32	   37
void                     	    8
w                        	   17
x                        	   12	   18	   26	   27	   32	   42	   43
y                        	   12	   22	   27	   28	   37	   43	   44

1	: /*******************************************************
2	:     Examples: 5.0 Text Files: Write/Read
3	: /*******************************************************/
/*4	:
5	: #include <stdio.h>
6	: #include <math.h>
7	:
8	: int main (void)
9	: {
10	:     // Text Files
11	:     FILE *fp;
12	:     double x, y;
13	:     long int a;
14	:
15	:     x = sqrt(3.0); // 1.732051;
16	:
17	:     fp = fopen("num.txt", "w");
18	:     fprintf(fp, "%f", x);
19	:     fclose(fp);
20	:
21	:     fp = fopen("num.txt", "r");
22	:     fscanf(fp, "%lf", &y);
23	:     fclose(fp);
24	:
25	:     printf("TEXT Files:\n");
26	:     printf("%f is ", x);
27	:     if (x != y) printf("NOT ");
28	:     printf("EQUAL to \n%f\n\n", y);
29	:
30	:     // Binary Files
31	:     fp = fopen("num.dat", "wb"); // write binary
32	:     fwrite(&x, sizeof (double), 1, fp);
33	:     //write from x, 1 item the size of a double to file fp
34	:     fclose(fp);
35	:
36	:     fp = fopen("num.dat", "rb"); // read binary
37	:     fread(&y, sizeof (double), 1, fp);
38	:     // read into y, 1 item the size of a double from file fp
39	:     fclose(fp);
40	:
41	:     printf("BINARY Files:\n");
42	:     printf("%f is ", x);
43	:     if (x != y) printf("NOT ");
44	:     printf("EQUAL to \n%f\n\n", y);
45	:
46	:     return 0;
47	: }
Program ended with exit code: 0
*/
